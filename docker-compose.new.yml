version: "3.9"

# Main Docker Compose orchestrator for MCP Gateway
# This file includes all service modules and provides unified management
#
# Usage Examples:
#   docker-compose --profile all up -d              # Start all services
#   docker-compose --profile core up -d             # Start only core gateway
#   docker-compose --profile data up -d             # Start data services only
#   docker-compose --profile ai up -d               # Start AI/ML services only
#   docker-compose --profile browser up -d          # Start browser services only
#   docker-compose --profile minimal up -d          # Start minimal setup
#
# Available Profiles:
#   - all: All services (default)
#   - core: MCP Gateway only
#   - data: Kaggle + MSSQL bridges
#   - ai: Context7 + Gistpad bridges
#   - browser: Playwright bridge
#   - minimal: Core + essential services

include:
  # Network configuration and shared resources
  - compose/compose.net.yml
  
  # Core MCP Gateway service
  - compose/compose.core.yml
  
  # Data services (Kaggle, MSSQL)
  - compose/compose.data.yml
  
  # AI/ML services (Context7, Gistpad)
  - compose/compose.ai.yml
  
  # Browser automation services (Playwright)
  - compose/compose.browser.yml

# Additional global configuration
volumes:
  # Global backup volume
  mcp_backups:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${BACKUP_DIR:-./backups}

# Optional monitoring service (can be enabled with MONITORING_ENABLED=true)
services:
  # Global health monitor service (optional)
  health-monitor:
    image: alpine:latest
    container_name: mcp-health-monitor
    profiles: ["monitoring"]
    environment:
      http_proxy: "${PROXY_SERVER}"
      https_proxy: "${PROXY_SERVER}"
      HTTP_PROXY: "${PROXY_SERVER}"
      HTTPS_PROXY: "${PROXY_SERVER}"
      no_proxy: "${PROXY_BYPASS}"
      NO_PROXY: "${PROXY_BYPASS}"
      TZ: "${TIMEZONE:-UTC}"
      HEALTH_CHECK_INTERVAL: "${GLOBAL_HEALTH_CHECK_INTERVAL:-60s}"
      GATEWAY_URL: "http://mcp-gateway:4444/health"
      LOG_FILE: "/logs/health-monitor.log"
    volumes:
      - ${LOG_DIR:-./logs}:/logs
    command:
      - sh
      - -c
      - |
        echo "Starting MCP Gateway Health Monitor..."
        echo "Gateway URL: $$GATEWAY_URL"
        echo "Check Interval: $$HEALTH_CHECK_INTERVAL"
        echo "Log File: $$LOG_FILE"
        
        while true; do
          TIMESTAMP=$$(date '+%Y-%m-%d %H:%M:%S')
          
          # Check gateway health
          if wget -q --spider --timeout=10 "$$GATEWAY_URL" 2>/dev/null; then
            echo "$$TIMESTAMP [INFO] MCP Gateway: HEALTHY" >> $$LOG_FILE
          else
            echo "$$TIMESTAMP [ERROR] MCP Gateway: UNHEALTHY" >> $$LOG_FILE
          fi
          
          sleep $$HEALTH_CHECK_INTERVAL
        done
    restart: unless-stopped
    networks:
      - mcpnet
    depends_on:
      - mcp-gateway
    logging:
      driver: "json-file"
      options:
        max-size: "${LOG_MAX_SIZE:-5m}"
        max-file: "${LOG_MAX_FILE:-2}"
        labels: "service=health-monitor,profile=monitoring"

# Configuration notes:
# 1. All services use the mcpnet network for internal communication
# 2. Only mcp-gateway exposes ports to the host
# 3. Bridge services communicate via SSE endpoints on internal ports
# 4. Data persistence is handled through named volumes and bind mounts
# 5. Environment variables are centralized in .env file
# 6. Resource limits are configured per service profile
# 7. Health checks are enabled for all services
# 8. Logging is configured with rotation and size limits