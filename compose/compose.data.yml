version: "3.9"

# Common environment variables template
x-common-variables: &common-variables
  http_proxy: "${PROXY_SERVER}"
  https_proxy: "${PROXY_SERVER}"
  HTTP_PROXY: "${PROXY_SERVER}"
  HTTPS_PROXY: "${PROXY_SERVER}"
  no_proxy: "${PROXY_BYPASS}"
  NO_PROXY: "${PROXY_BYPASS}"
  TZ: "${TIMEZONE:-UTC}"

# Common bridge configuration for all MCP bridge services
x-bridge-config: &bridge-config
  extra_hosts:
    - "host.docker.internal:host-gateway"
  restart: unless-stopped
  networks:
    - mcpnet

# Common health check configuration
x-health-check: &health-check
  interval: ${HEALTH_CHECK_INTERVAL:-30s}
  timeout: 10s
  retries: 3
  start_period: 40s

# Common resource limits for bridge services
x-bridge-resources: &bridge-resources
  limits:
    memory: ${DEFAULT_BRIDGE_MEMORY_LIMIT:-256m}
    cpus: '${DEFAULT_BRIDGE_CPU_LIMIT:-0.3}'

# Include network configuration
include:
  - compose.net.yml

services:
  # Kaggle MCP Bridge - Data science operations
  kaggle-bridge:
    image: python:3.11-slim
    container_name: kaggle-bridge
    env_file: .env
    
    # Use common bridge configuration
    <<: *bridge-config
    
    environment:
      <<: *common-variables
      KAGGLE_USERNAME: "${KAGGLE_USERNAME}"
      KAGGLE_KEY: "${KAGGLE_KEY}"
      KAGGLE_DATA_DIR: "${KAGGLE_DATA_DIR:-/data}"

    volumes:
      - ${DATA_DIR:-./data}/kaggle:/data
      - ${KAGGLE_DATA_DIR:-./kaggle-data}:/kaggle-data
      - ${LOG_DIR:-./logs}:/logs

    command: 
      - bash
      - -lc
      - >
        set -euo pipefail &&
        export http_proxy="${PROXY_SERVER:-}"; export https_proxy="${PROXY_SERVER:-}";
        export HTTP_PROXY="$http_proxy"; export HTTPS_PROXY="$https_proxy";
        export no_proxy="${PROXY_BYPASS:-localhost,127.0.0.1}"; export NO_PROXY="$no_proxy";
        apt-get update &&
        apt-get install -y --no-install-recommends git ca-certificates curl &&
        rm -rf /var/lib/apt/lists/* &&
        pip install --no-cache-dir --upgrade pip mcp-contextforge-gateway &&
        rm -rf /app/kaggle-mcp &&
        git clone --depth=1 https://github.com/arrismo/kaggle-mcp /app/kaggle-mcp &&
        pip install --no-cache-dir -r /app/kaggle-mcp/requirements.txt &&
        printf '%s\n' '#!/usr/bin/env bash' 'set -euo pipefail' \
          'cd /app/kaggle-mcp' \
          'export PYTHONPATH="/app/kaggle-mcp/src:/app/kaggle-mcp${PYTHONPATH:+:$PYTHONPATH}"' \
          'echo "[run-kaggle-mcp] pwd=$(pwd)"; ls -la' \
          'exec python -m server' \
          > /usr/local/bin/run-kaggle-mcp.sh &&
        chmod +x /usr/local/bin/run-kaggle-mcp.sh &&
        python -m mcpgateway.translate \
          --stdio "/usr/local/bin/run-kaggle-mcp.sh" \
          --expose-sse \
          --host 0.0.0.0 \
          --port 9000

    expose:
      - "9000"

    healthcheck:
      test: ["CMD-SHELL", "curl -sS -D- http://localhost:9000/sse --max-time 2 | grep -q 'HTTP/1.1 200'"]
      <<: *health-check

    deploy:
      resources:
        <<: *bridge-resources
        limits:
          memory: ${KAGGLE_BRIDGE_MEMORY_LIMIT:-256m}
          cpus: '${KAGGLE_BRIDGE_CPU_LIMIT:-0.3}'
        reservations:
          memory: ${KAGGLE_BRIDGE_MEMORY_RESERVATION:-128m}
          cpus: '${KAGGLE_BRIDGE_CPU_RESERVATION:-0.2}'

    profiles: ["data", "all"]

    logging:
      driver: "json-file"
      options:
        max-size: "${LOG_MAX_SIZE:-10m}"
        max-file: "${LOG_MAX_FILE:-3}"
        labels: "service=kaggle-bridge,profile=data"

    security_opt:
      - no-new-privileges:true

  # MSSQL MCP Bridge - Database operations
  mssql-bridge:
    image: python:3.11-slim
    container_name: mssql-bridge
    env_file: .env
    
    # Use common bridge configuration
    <<: *bridge-config
    
    environment:
      <<: *common-variables
      MSSQL_SERVER: "${MSSQL_SERVER}"
      MSSQL_DATABASE: "${MSSQL_DATABASE}"
      MSSQL_USER: "${MSSQL_USER}"
      MSSQL_PASSWORD: "${MSSQL_PASSWORD}"
      MSSQL_PORT: "${MSSQL_PORT}"
      MSSQL_ENCRYPT: "${MSSQL_ENCRYPT:-false}"
      MSSQL_TRUST_SERVER_CERTIFICATE: "${MSSQL_TRUST_SERVER_CERTIFICATE:-true}"

    volumes:
      - ${LOG_DIR:-./logs}:/logs

    command:
      - bash
      - -lc
      - |
        set -euo pipefail
        export http_proxy="${PROXY_SERVER:-}"; export https_proxy="${PROXY_SERVER:-}";
        export HTTP_PROXY="$http_proxy"; export HTTPS_PROXY="$https_proxy";
        export no_proxy="${PROXY_BYPASS:-localhost,127.0.0.1}"; export NO_PROXY="$no_proxy";
        export DEBIAN_FRONTEND=noninteractive
        apt-get update
        apt-get install -y --no-install-recommends ca-certificates gcc g++ unixodbc-dev curl
        rm -rf /var/lib/apt/lists/*

        pip install --no-cache-dir --upgrade pip mcp-contextforge-gateway
        pip install --no-cache-dir microsoft_sql_server_mcp python-tds pymssql

        # Monkey patch: map encrypt -> encryption for pymssql
        mkdir -p /app/patch
        cat >/app/patch/sitecustomize.py <<'PY'
        import sys
        sys.stderr.write("[sitecustomize] loaded\n")
        try:
            import pymssql as _pymssql
            _orig = _pymssql.connect
            def _connect(*args, **kwargs):
                # map encrypt(bool) -> encryption("require"/"off")
                if 'encrypt' in kwargs:
                    v = kwargs.pop('encrypt')
                    on = v if isinstance(v, bool) else str(v).lower() in ('1','true','yes','on')
                    kwargs['encryption'] = 'require' if on else 'off'
                # Remove cert-related keys
                kwargs.pop('trust_server_certificate', None)
                kwargs.pop('trustServerCertificate', None)
                return _orig(*args, **kwargs)
            _pymssql.connect = _connect
            sys.stderr.write("[sitecustomize] pymssql.connect patched\n")
        except Exception as e:
            sys.stderr.write(f"[sitecustomize] patch skipped: {e}\n")
        PY
        export PYTHONPATH="/app/patch${PYTHONPATH:+:$PYTHONPATH}"

        # Clear side-effect from old env variables
        unset MSSQL_ENCRYPT MSSQL_TRUST_SERVER_CERTIFICATE || true

        # Start MCP bridge
        python -m mcpgateway.translate --stdio "python -m mssql_mcp_server" --expose-sse --host 0.0.0.0 --port 9020

    expose:
      - "9020"

    healthcheck:
      test: ["CMD-SHELL", "curl -sS -D- http://localhost:9020/sse --max-time 2 | grep -q 'HTTP/1.1 200'"]
      <<: *health-check

    deploy:
      resources:
        <<: *bridge-resources
        limits:
          memory: ${MSSQL_BRIDGE_MEMORY_LIMIT:-256m}
          cpus: '${MSSQL_BRIDGE_CPU_LIMIT:-0.3}'
        reservations:
          memory: ${MSSQL_BRIDGE_MEMORY_RESERVATION:-128m}
          cpus: '${MSSQL_BRIDGE_CPU_RESERVATION:-0.2}'

    profiles: ["data", "all"]

    logging:
      driver: "json-file"
      options:
        max-size: "${LOG_MAX_SIZE:-10m}"
        max-file: "${LOG_MAX_FILE:-3}"
        labels: "service=mssql-bridge,profile=data"

    security_opt:
      - no-new-privileges:true